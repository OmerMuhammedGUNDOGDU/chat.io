[{"C:\\Users\\omuha\\Desktop\\chat.io\\chat-app\\src\\index.js":"1","C:\\Users\\omuha\\Desktop\\chat.io\\chat-app\\src\\App.js":"2","C:\\Users\\omuha\\Desktop\\chat.io\\chat-app\\src\\components\\auth\\Login.jsx":"3","C:\\Users\\omuha\\Desktop\\chat.io\\chat-app\\src\\components\\auth\\SignUp.jsx":"4","C:\\Users\\omuha\\Desktop\\chat.io\\chat-app\\src\\firebase.js":"5","C:\\Users\\omuha\\Desktop\\chat.io\\chat-app\\src\\store\\store.js":"6","C:\\Users\\omuha\\Desktop\\chat.io\\chat-app\\src\\store\\rootReducer.js":"7","C:\\Users\\omuha\\Desktop\\chat.io\\chat-app\\src\\components\\auth\\PrivateRoute.jsx":"8","C:\\Users\\omuha\\Desktop\\chat.io\\chat-app\\src\\components\\Fallback.jsx":"9","C:\\Users\\omuha\\Desktop\\chat.io\\chat-app\\src\\components\\SidePanel\\SidePanel.jsx":"10","C:\\Users\\omuha\\Desktop\\chat.io\\chat-app\\src\\components\\Channels\\CreateChannelForm.jsx":"11","C:\\Users\\omuha\\Desktop\\chat.io\\chat-app\\src\\components\\Channels\\ChannelList.jsx":"12","C:\\Users\\omuha\\Desktop\\chat.io\\chat-app\\src\\store\\reducers\\channelReducer.js":"13","C:\\Users\\omuha\\Desktop\\chat.io\\chat-app\\src\\store\\actions\\types.js":"14","C:\\Users\\omuha\\Desktop\\chat.io\\chat-app\\src\\store\\actions\\channel.js":"15","C:\\Users\\omuha\\Desktop\\chat.io\\chat-app\\src\\components\\UserPanel\\UserPanel.jsx":"16","C:\\Users\\omuha\\Desktop\\chat.io\\chat-app\\src\\components\\ChatPanel\\ChatPanel.jsx":"17","C:\\Users\\omuha\\Desktop\\chat.io\\chat-app\\src\\components\\ChatPanel\\Message.jsx":"18"},{"size":1601,"mtime":1633711706945,"results":"19","hashOfConfig":"20"},{"size":750,"mtime":1633814682765,"results":"21","hashOfConfig":"20"},{"size":3745,"mtime":1633709406529,"results":"22","hashOfConfig":"20"},{"size":4809,"mtime":1633709470552,"results":"23","hashOfConfig":"20"},{"size":554,"mtime":1633645241991,"results":"24","hashOfConfig":"20"},{"size":308,"mtime":1633646598571,"results":"25","hashOfConfig":"20"},{"size":279,"mtime":1633791232611,"results":"26","hashOfConfig":"20"},{"size":846,"mtime":1633713308299,"results":"27","hashOfConfig":"20"},{"size":436,"mtime":1633713271035,"results":"28","hashOfConfig":"20"},{"size":1894,"mtime":1633800352260,"results":"29","hashOfConfig":"20"},{"size":2736,"mtime":1633801107060,"results":"30","hashOfConfig":"20"},{"size":1681,"mtime":1633801551898,"results":"31","hashOfConfig":"20"},{"size":372,"mtime":1633791177646,"results":"32","hashOfConfig":"20"},{"size":59,"mtime":1633788964669,"results":"33","hashOfConfig":"20"},{"size":176,"mtime":1633789142593,"results":"34","hashOfConfig":"20"},{"size":763,"mtime":1633800630702,"results":"35","hashOfConfig":"20"},{"size":6454,"mtime":1633911962869,"results":"36","hashOfConfig":"20"},{"size":974,"mtime":1633876981067,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"41"},"1alrmda",{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"41"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"41"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"41"},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"41"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"41"},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"41"},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"41"},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81"},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\omuha\\Desktop\\chat.io\\chat-app\\src\\index.js",["84"],"import React, { useEffect } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport {\n  ReactReduxFirebaseProvider,\n  firebaseReducer,\n} from \"react-redux-firebase\";\nimport firebase from \"./firebase\";\nimport store from \"./store/store\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch,\n  useHistory,\n} from \"react-router-dom\";\n\nimport \"./index.css\";\nimport App from \"./App\";\nimport SignUp from \"./components/auth/SignUp\";\nimport Login from \"./components/auth/Login\";\nimport PrivateRoute from \"./components/auth/PrivateRoute\";\n\nconst rrfConfig = {\n  userProfile: \"users\",\n};\n\nconst rrfProps = {\n  firebase,\n  config: rrfConfig,\n  dispatch: store.dispatch,\n};\n\n// Sayfa Yönlendirmeleri Yapıldı!\nconst Root = () => {\n  const history = useHistory();\n\n  useEffect(() => {\n    firebase.auth().onAuthStateChanged((user) => {\n      if (user) {\n        //login olmuş ise anasayfaya yönlendir\n        history.push(\"/\");\n      } else {\n        //login olmamış ise \"giriş yap\" ya da \"kaydol\" ekranına atsın istiyoruz\n        history.push(\"/login\");\n      }\n    });\n  });\n\n  return (\n    <Switch>\n      <PrivateRoute exact path=\"/\">\n        <App />\n      </PrivateRoute>\n      <Route path=\"/signup\" component={SignUp} />\n      <Route path=\"/login\" component={Login} />\n    </Switch>\n  );\n};\n\nReactDOM.render(\n  <Provider store={store}>\n    <ReactReduxFirebaseProvider {...rrfProps}>\n      <Router>\n        <Root />\n      </Router>\n    </ReactReduxFirebaseProvider>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n",["85","86"],"C:\\Users\\omuha\\Desktop\\chat.io\\chat-app\\src\\App.js",[],"C:\\Users\\omuha\\Desktop\\chat.io\\chat-app\\src\\components\\auth\\Login.jsx",["87"],"import React, { useState, useEffect } from \"react\";\r\nimport { useFirebase } from \"react-redux-firebase\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button, Form, Grid, Message, Segment } from \"semantic-ui-react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport styles from \"../../components/auth/login.module.css\";\r\n\r\nconst Login = () => {\r\n\r\n    const firebase = useFirebase();\r\n\r\n    const { register, errors, handleSubmit, setValue } = useForm();\r\n\r\n    const [fbErrors, setFbErrors] = useState([]);\r\n    const [submitting, setSubmitting] = useState(false);\r\n\r\n    useEffect(() => {\r\n        register({ name: \"email\" }, { required: true });\r\n        register({ name: \"password\" }, { required: true, minLength: 6 });\r\n    }, []);\r\n\r\n    const onSubmit = ({ email, password }, e) => {\r\n        setSubmitting(true);\r\n        setFbErrors([]);\r\n\r\n        firebase.login({\r\n            email, password\r\n        })\r\n            .then((data) => {\r\n                console.log(data);\r\n            })\r\n            .catch((error) => {\r\n                setFbErrors([{ message: error.message }])\r\n            })\r\n            .finally(() => {\r\n                setSubmitting(false);\r\n            })\r\n    };\r\n\r\n    const displayErrors = () =>\r\n        fbErrors.map((error, index) => <p key={index}>{error.message} </p>);\r\n\r\n    return (\r\n        <Grid\r\n            textAlign=\"center\"\r\n            verticalAlign=\"middle\"\r\n            className={styles.container}\r\n        >\r\n            <Grid.Column style={{ maxWidth: 450 }}>\r\n\r\n                <h1 className={styles.formHeader}>\r\n                    Blackice\r\n                    <span>.io</span>\r\n                </h1>\r\n\r\n                <Form\r\n                    size=\"large\"\r\n                    className={styles.form}\r\n                    onSubmit={handleSubmit(onSubmit)}\r\n                >\r\n                    <Segment>\r\n                        <Form.Input\r\n                            fluid\r\n                            icon=\"mail\"\r\n                            iconPosition=\"left\"\r\n                            name=\"email\"\r\n                            onChange={(event, { name, value }) => {\r\n                                setValue(name, value);\r\n                            }}\r\n                            placeholder=\"Email Adresi\"\r\n                            type=\"email\"\r\n                            error={errors.email ? true : false}\r\n                        />\r\n\r\n                        <Form.Input\r\n                            fluid\r\n                            icon=\"lock\"\r\n                            iconPosition=\"left\"\r\n                            name=\"password\"\r\n                            onChange={(event, { name, value }) => {\r\n                                setValue(name, value);\r\n                            }}\r\n                            placeholder=\"Parola\"\r\n                            type=\"password\"\r\n                            error={errors.password ? true : false}\r\n                        />\r\n\r\n                        <Button\r\n                            color=\"purple\"\r\n                            fluid\r\n                            size=\"large\"\r\n                            disabled={submitting}\r\n                        >\r\n                            Giriş Yap\r\n                        </Button>\r\n\r\n                    </Segment>\r\n                </Form>\r\n\r\n                {\r\n                    fbErrors.length > 0 && < Message error> {displayErrors()}</Message>\r\n                }\r\n\r\n                <Message>\r\n                    Yeni misin? <Link to=\"/signup\">\r\n                        Hesap Oluştur\r\n                    </Link>\r\n                </Message>\r\n\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default Login","C:\\Users\\omuha\\Desktop\\chat.io\\chat-app\\src\\components\\auth\\SignUp.jsx",["88"],"import React, { useState, useEffect } from \"react\";\r\nimport { useFirebase } from \"react-redux-firebase\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button, Form, Grid, Message, Segment } from \"semantic-ui-react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport styles from \"../../components/auth/signUp.module.css\";\r\n\r\nconst SignUp = () => {\r\n\r\n    const firebase = useFirebase();\r\n\r\n    const { register, errors, handleSubmit, setValue } = useForm();\r\n\r\n    const [fbErrors, setFbErrors] = useState([]);\r\n    const [submitting, setSubmitting] = useState(false);\r\n\r\n    useEffect(() => {\r\n        register({ name: \"username\" }, { required: true });\r\n        register({ name: \"email\" }, { required: true });\r\n        register({ name: \"password\" }, { required: true, minLength: 6 });\r\n    }, []);\r\n\r\n    const onSubmit = ({ username, email, password }, e) => {\r\n        setSubmitting(true);\r\n        setFbErrors([]);\r\n\r\n        const [first, last] = username.split('');\r\n\r\n        firebase\r\n            .createUser(\r\n                { email, password },\r\n                {\r\n                    name: username,\r\n                    avatar: `https://ui-avatars.com/api/?name=${first}+${last}&background=random&color=fff` // avatar oluştururken İsmin ilk harfi ve soyadın ilk harfi olacak şekilde ve renkleri rastgele olacak ve yazısı beyaz renkte olacak \r\n                }\r\n            )\r\n            .then((user) => {\r\n                console.log(user);\r\n            })\r\n            .catch((error) => {\r\n                setFbErrors([{ message: error.message }]);\r\n            })\r\n            .finally(() => {\r\n                setSubmitting(false);\r\n            })\r\n\r\n    };\r\n\r\n    const displayErrors = () =>\r\n        fbErrors.map((error, index) => <p key={index}>{error.message} </p>);\r\n\r\n    return (\r\n        <Grid\r\n            textAlign=\"center\"\r\n            verticalAlign=\"middle\"\r\n            className={styles.container}\r\n        >\r\n            <Grid.Column style={{ maxWidth: 450 }}>\r\n\r\n                <h1 className={styles.formHeader}>\r\n                    Blackice\r\n                    <span>.io</span>\r\n                </h1>\r\n\r\n                <Form\r\n                    size=\"large\"\r\n                    className={styles.form}\r\n                    onSubmit={handleSubmit(onSubmit)}\r\n                >\r\n                    <Segment>\r\n                        <Form.Input\r\n                            fluid\r\n                            icon=\"user\"\r\n                            iconPosition=\"left\"\r\n                            placeholder=\"Kullanıcı Adı\"\r\n                            name=\"username\"\r\n                            onChange={(e, { name, value }) => {\r\n                                setValue(name, value);\r\n                            }}\r\n                            type=\"text\"\r\n                            error={errors.username ? true : false}\r\n                        />\r\n\r\n                        <Form.Input\r\n                            fluid\r\n                            icon=\"mail\"\r\n                            iconPosition=\"left\"\r\n                            placeholder=\"Email Adresi\"\r\n                            name=\"email\"\r\n                            onChange={(e, { name, value }) => {\r\n                                setValue(name, value);\r\n                            }}\r\n                            type=\"email\"\r\n                            error={errors.email ? true : false}\r\n                        />\r\n                        <Form.Input\r\n                            fluid\r\n                            icon=\"lock\"\r\n                            iconPosition=\"left\"\r\n                            placeholder=\"Şifre\"\r\n                            name=\"password\"\r\n                            onChange={(e, { name, value }) => {\r\n                                setValue(name, value);\r\n                            }}\r\n                            type=\"password\"\r\n                            error={errors.password ? true : false}\r\n                        />\r\n\r\n                        <Button\r\n                            color=\"purple\"\r\n                            fluid\r\n                            size=\"large\"\r\n                            disabled={submitting}\r\n                        >\r\n                            Kaydol\r\n                        </Button>\r\n\r\n                    </Segment>\r\n                </Form>\r\n\r\n                {\r\n                    fbErrors.length > 0 && < Message error> {displayErrors()}</Message>\r\n                }\r\n\r\n                <Message>\r\n                    Zaten bir hesabın var mı?\r\n                    <Link to=\"/login\">\r\n                        Giriş Yap\r\n                    </Link>\r\n                </Message>\r\n\r\n            </Grid.Column>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default SignUp;","C:\\Users\\omuha\\Desktop\\chat.io\\chat-app\\src\\firebase.js",[],"C:\\Users\\omuha\\Desktop\\chat.io\\chat-app\\src\\store\\store.js",["89"],"// Uygulamamızın redux store'u oluşturuluyor\r\n\r\nimport { createStore, applyMiddleware } from \"redux\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport rootReducer from \"./rootReducer\";\r\n\r\nconst store = createStore(rootReducer, {}, composeWithDevTools());\r\n\r\nexport default store;\r\n","C:\\Users\\omuha\\Desktop\\chat.io\\chat-app\\src\\store\\rootReducer.js",[],"C:\\Users\\omuha\\Desktop\\chat.io\\chat-app\\src\\components\\auth\\PrivateRoute.jsx",[],"C:\\Users\\omuha\\Desktop\\chat.io\\chat-app\\src\\components\\Fallback.jsx",["90"],"import React from 'react'\r\nimport { Dimmer, Loader, Image, Segment, Icon } from \"semantic-ui-react\";\r\n\r\nconst Fallback = () => {\r\n    return (\r\n        <Segment style={{ height: \"100vh\" }}>\r\n\r\n            <Dimmer active>\r\n                <Loader />\r\n            </Dimmer>\r\n\r\n            <Image src='https://react.semantic-ui.com/images/wireframe/short-paragraph.png' /> {\" \"}\r\n\r\n        </Segment>\r\n    )\r\n}\r\n\r\nexport default Fallback\r\n","C:\\Users\\omuha\\Desktop\\chat.io\\chat-app\\src\\components\\SidePanel\\SidePanel.jsx",[],"C:\\Users\\omuha\\Desktop\\chat.io\\chat-app\\src\\components\\Channels\\CreateChannelForm.jsx",["91"],"import React, { useEffect } from 'react'\r\nimport { useSelector } from \"react-redux\"\r\nimport { Modal, Form, Button, ModalContent } from \"semantic-ui-react\"\r\nimport { useForm } from \"react-hook-form\"\r\nimport { useFirebase } from \"react-redux-firebase\"\r\n\r\nconst CreateChannelForm = ({ open, onOpen, onClose }) => {\r\n\r\n    const firebase = useFirebase();\r\n    const profile = useSelector((state) => state.firebase.profile);\r\n    const { register, errors, handleSubmit, setValue } = useForm();\r\n\r\n    useEffect(() => {\r\n        register({ name: \"name\" }, { required: true });\r\n        register({ name: \"description\" }, { required: true, minLength: 10 });\r\n    }, []);\r\n\r\n    const onSubmit = ({ name, description }) => {\r\n        firebase.push(\"channels\", {\r\n            name,\r\n            description,\r\n            createdBy: {\r\n                name: profile.name,\r\n                avatar: profile.avatar,\r\n            },\r\n        });\r\n\r\n        onClose();\r\n    };\r\n\r\n    return (\r\n        <Modal open={open} onOpen={onOpen} onClose={onClose}>\r\n            <Modal.Header>Yeni Kanal Oluştur</Modal.Header>\r\n            <ModalContent>\r\n                <Form onSubmit={handleSubmit(onSubmit)}>\r\n                    <Form.Input\r\n                        fluid\r\n                        icon=\"hashtag\"\r\n                        iconPosition=\"left\"\r\n                        name=\"name\"\r\n                        placeholder=\"#Genel\"\r\n                        onChange={(e, { name, value }) => {\r\n                            setValue(name, value);\r\n                        }}\r\n                        error={errors.name ? true : false}\r\n                    />\r\n\r\n                    <Form.Input\r\n                        fluid\r\n                        icon=\"hashtag\"\r\n                        iconPosition=\"left\"\r\n                        name=\"description\"\r\n                        placeholder=\"#Genel her türlü konunun konuşulabileceği bir kanaldır\"\r\n                        onChange={(e, { name, value }) => {\r\n                            setValue(name, value);\r\n                        }}\r\n                        error={errors.description ? true : false}\r\n                    />\r\n                </Form>\r\n            </ModalContent>\r\n\r\n            <Modal.Actions>\r\n                <Button\r\n                    color=\"black\"\r\n                    onClick={() => onClose()}>\r\n                    Vazgeç\r\n                </Button>\r\n\r\n                <Button\r\n                    icon=\"checkmark\"\r\n                    content=\"Oluştur\"\r\n                    positive\r\n                    onClick={() => handleSubmit(onSubmit)()}\r\n                />\r\n\r\n            </Modal.Actions>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default CreateChannelForm\r\n","C:\\Users\\omuha\\Desktop\\chat.io\\chat-app\\src\\components\\Channels\\ChannelList.jsx",["92"],"import React, { useState, useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { useFirebaseConnect, isLoaded, isEmpty } from 'react-redux-firebase';\r\nimport { Menu } from 'semantic-ui-react';\r\nimport { setCurrentChannel } from '../../store/actions/channel';\r\n\r\nconst ChannelList = () => {\r\n\r\n    useFirebaseConnect([{ path: \"channels\" }]);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const channels = useSelector((state) => state.firebase.ordered.channels);\r\n    const currentChannel = useSelector((state) => state.channels.currentChannel);\r\n    const [mounted, setMounted] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if (!mounted && !isEmpty(channels)) {\r\n            const { key, value } = channels[0];\r\n            setActiveChannel({ key, ...value });\r\n            setMounted(true);\r\n        }\r\n    })\r\n\r\n    const setActiveChannel = channel => {\r\n        dispatch(setCurrentChannel(channel));\r\n    }\r\n\r\n    if (!isLoaded(channels)) {\r\n        return \"Loading channels..\";\r\n    }\r\n\r\n    if (isEmpty(channels)) {\r\n        return \"No channel\";\r\n    }\r\n\r\n    return (\r\n        <Menu.Menu>\r\n            {\r\n                channels.map(({ key, value }) => (\r\n                    <Menu.Item\r\n                        key={key}\r\n                        name={value?.name} //Eğer value tanımlı ise\r\n                        as=\"a\"\r\n                        icon=\"hashtag\"\r\n                        active={currentChannel?.key === key}\r\n                        onClick={() => setActiveChannel({ key, ...value })}\r\n                    />\r\n                ))\r\n            }\r\n        </Menu.Menu>\r\n    );\r\n};\r\n\r\nexport default ChannelList;\r\n","C:\\Users\\omuha\\Desktop\\chat.io\\chat-app\\src\\store\\reducers\\channelReducer.js",["93"],"import * as types from \"../actions/types\";\r\n\r\nconst initialState = {\r\n  currentChannel: null,\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case types.SET_CURRENT_CHANNEL:\r\n      return {\r\n        ...state,\r\n        currentChannel: action.payload,\r\n      };\r\n\r\n    default:\r\n      return {\r\n        ...state,\r\n      };\r\n  }\r\n};\r\n","C:\\Users\\omuha\\Desktop\\chat.io\\chat-app\\src\\store\\actions\\types.js",[],"C:\\Users\\omuha\\Desktop\\chat.io\\chat-app\\src\\store\\actions\\channel.js",[],"C:\\Users\\omuha\\Desktop\\chat.io\\chat-app\\src\\components\\UserPanel\\UserPanel.jsx",[],"C:\\Users\\omuha\\Desktop\\chat.io\\chat-app\\src\\components\\ChatPanel\\ChatPanel.jsx",["94","95"],"import React, { useState, useEffect, useRef } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useFirebase } from \"react-redux-firebase\";\r\nimport { useFirebaseConnect, isLoaded, isEmpty } from \"react-redux-firebase\";\r\nimport {\r\n    Header,\r\n    Segment,\r\n    Comment,\r\n    Icon,\r\n    Input,\r\n    Form,\r\n    Button,\r\n} from \"semantic-ui-react\";\r\nimport Message from \"./Message\";\r\n\r\nconst { uuid } = require(\"uuidv4\");\r\n\r\nconst ChatPanel = ({ currentChannel }) => {\r\n\r\n    useFirebaseConnect([\r\n        {\r\n            path: `/messages/${currentChannel.key}`,\r\n            storeAs: \"channelMessages\",\r\n        },\r\n    ]);\r\n\r\n    const firebase = useFirebase();\r\n    const currentUserUid = useSelector((state) => state.firebase.auth.uid);\r\n    const profile = useSelector((state) => state.firebase.profile);\r\n    const channelMessages = useSelector((state) => state.firebase.ordered.channelMessages);\r\n\r\n    const [content, setContent] = useState(\"\");\r\n    const [searchTerm, setSearchTerm] = useState(\"\");\r\n\r\n    const fileInputRef = useRef(null);\r\n    const messsagesEndRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        messsagesEndRef.current.scrollIntoView({\r\n            behaviour: \"smooth\",\r\n            block: \"end\",\r\n        });\r\n    });\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        if (content !== \"\") {\r\n            const message = {\r\n                content,\r\n                timestamp: firebase.database.ServerValue.TIMESTAMP,\r\n                user: {\r\n                    id: currentUserUid,\r\n                    name: profile.name,\r\n                    avatar: profile.avatar,\r\n                },\r\n            };\r\n\r\n            // Send a message\r\n            firebase.push(`messages/${currentChannel.key}`, message).then(() => {\r\n                setContent(\"\");\r\n            })\r\n        }\r\n    }\r\n\r\n    const uploadMedia = (event) => {\r\n        const file = event.target.files[0];\r\n\r\n        // console.log(file);\r\n\r\n        if (file) {\r\n            const storageRef = firebase.storage().ref();\r\n            const fileRef = storageRef.child(`chat/public/${uuid()}.jpg`);\r\n\r\n            return fileRef.put(file)\r\n                .then((snap) => {\r\n                    fileRef.getDownloadURL().then((downloadURL) => {\r\n                        sendMediaMessage(downloadURL);\r\n                    })\r\n                })\r\n                .catch((err) => {\r\n                    console.err(\"error uploadin file\", err);\r\n                })\r\n        }\r\n    }\r\n\r\n    const sendMediaMessage = url => {\r\n        const message = {\r\n            image: url,\r\n            timestamp: firebase.database.ServerValue.TIMESTAMP,\r\n            user: {\r\n                id: currentUserUid,\r\n                name: profile.name,\r\n                avatar: profile.avatar,\r\n            },\r\n        };\r\n\r\n        firebase.push(`messages/${currentChannel.key}`, message).then(() => {\r\n            console.log(\"Media message sent\");\r\n        })\r\n    }\r\n\r\n    const filterMessages = () => {\r\n        const regex = new RegExp(searchTerm, \"gi\");\r\n\r\n        const searchResults = [...channelMessages].reduce((acc, message) => {\r\n            if (\r\n                (message.value.content && message.value.content.match(regex)) ||\r\n                message.value.user.name.match(regex)\r\n            ) {\r\n                acc.push(message);\r\n            }\r\n\r\n            return acc;\r\n        }, []);\r\n\r\n        return searchResults;\r\n    };\r\n\r\n    const renderedMessages = searchTerm !== \"\" ? filterMessages() : channelMessages;\r\n\r\n    return (\r\n        <>\r\n            {/* Messages Header */}\r\n            <Segment clearing>\r\n                <Header as=\"h3\" floated=\"left\">\r\n                    <span>\r\n                        <Icon name=\"hashtag\" />\r\n                        {currentChannel.name}\r\n                    </span>\r\n                </Header>\r\n\r\n                {/* Search Messages */}\r\n                <Header as=\"h3\" floated=\"right\">\r\n                    <Input\r\n                        size=\"mini\"\r\n                        icon=\"search\"\r\n                        name=\"searchTerm\"\r\n                        placeholder=\"Mesajlarda ara...\"\r\n                        value={searchTerm}\r\n                        onChange={(event) => setSearchTerm(event.target.value)}\r\n                    />\r\n                </Header>\r\n            </Segment>\r\n\r\n            {/* Messages */}\r\n\r\n            <Segment\r\n                style={{\r\n                    position: \"fixed\",\r\n                    top: 55,\r\n                    bottom: 70,\r\n                    width: \"81%\"\r\n                }}\r\n            >\r\n                <Comment.Group\r\n                    style={{\r\n                        height: \"80vh\",\r\n                        overflowY: \"auto\", // msjlar artmaya başladığı zaman otomatik olarak scrollbar eklemesini istedik.\r\n                        maxWidth: \"100\"\r\n                    }}\r\n                >\r\n                    {/* Gelen Mesajları Listeledik */}\r\n                    {renderedMessages && renderedMessages.map(({ key, value }) => (\r\n                        <Message key={key} message={value} />\r\n                    ))}\r\n\r\n                    <div ref={messsagesEndRef} />\r\n\r\n                </Comment.Group>\r\n            </Segment>\r\n\r\n            {/* Sen New Messager  */}\r\n\r\n            <Segment\r\n                style={{\r\n                    position: \"fixed\",\r\n                    bottom: 0,\r\n                    width: \"85%\",\r\n                    display: \"flex\",\r\n                }}\r\n            >\r\n\r\n                <Button icon onClick={() => fileInputRef.current.click()}>\r\n                    <Icon name=\"add\" />\r\n                    <input type=\"file\" name=\"file\" ref={fileInputRef} onChange={uploadMedia} />\r\n                </Button>\r\n\r\n                <Form onSubmit={handleSubmit} style={{ flex: \"1\" }}> {/* flex: \"1\" ile mesaj yazma kutusunu genişletebildiğin kadar genişlet dedik!  */}\r\n                    <Input\r\n                        fluid\r\n                        name=\"message\"\r\n                        value={content}\r\n                        onChange={event => setContent(event.target.value)}\r\n                        labelPosition=\"left\"\r\n                        placeholder={`# ${currentChannel?.name} kanalına mesaj gönder`}\r\n                    />\r\n                </Form>\r\n\r\n            </Segment>\r\n\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ChatPanel;\r\n","C:\\Users\\omuha\\Desktop\\chat.io\\chat-app\\src\\components\\ChatPanel\\Message.jsx",[],{"ruleId":"96","severity":1,"message":"97","line":6,"column":3,"nodeType":"98","messageId":"99","endLine":6,"endColumn":18},{"ruleId":"100","replacedBy":"101"},{"ruleId":"102","replacedBy":"103"},{"ruleId":"104","severity":1,"message":"105","line":20,"column":8,"nodeType":"106","endLine":20,"endColumn":10,"suggestions":"107"},{"ruleId":"104","severity":1,"message":"105","line":21,"column":8,"nodeType":"106","endLine":21,"endColumn":10,"suggestions":"108"},{"ruleId":"96","severity":1,"message":"109","line":3,"column":23,"nodeType":"98","messageId":"99","endLine":3,"endColumn":38},{"ruleId":"96","severity":1,"message":"110","line":2,"column":42,"nodeType":"98","messageId":"99","endLine":2,"endColumn":46},{"ruleId":"104","severity":1,"message":"105","line":16,"column":8,"nodeType":"106","endLine":16,"endColumn":10,"suggestions":"111"},{"ruleId":"104","severity":1,"message":"112","line":17,"column":5,"nodeType":"98","endLine":17,"endColumn":14,"suggestions":"113"},{"ruleId":"114","severity":1,"message":"115","line":7,"column":1,"nodeType":"116","endLine":20,"endColumn":3},{"ruleId":"96","severity":1,"message":"117","line":4,"column":30,"nodeType":"98","messageId":"99","endLine":4,"endColumn":38},{"ruleId":"96","severity":1,"message":"118","line":4,"column":40,"nodeType":"98","messageId":"99","endLine":4,"endColumn":47},"no-unused-vars","'firebaseReducer' is defined but never used.","Identifier","unusedVar","no-native-reassign",["119"],"no-negated-in-lhs",["120"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'register'. Either include it or remove the dependency array.","ArrayExpression",["121"],["122"],"'applyMiddleware' is defined but never used.","'Icon' is defined but never used.",["123"],"React Hook useEffect contains a call to 'setMounted'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [mounted, channels, setActiveChannel] as a second argument to the useEffect Hook.",["124"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'isLoaded' is defined but never used.","'isEmpty' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"125","fix":"126"},{"desc":"125","fix":"127"},{"desc":"125","fix":"128"},{"desc":"129","fix":"130"},"Update the dependencies array to be: [register]",{"range":"131","text":"132"},{"range":"133","text":"132"},{"range":"134","text":"132"},"Add dependencies array: [mounted, channels, setActiveChannel]",{"range":"135","text":"136"},[740,742],"[register]",[803,805],[658,660],[853,853],", [mounted, channels, setActiveChannel]"]